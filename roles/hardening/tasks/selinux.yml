---
- name: Install selinux dependencies when selinux is installed
  become: true
  ansible.builtin.apt:
    name: "{{ ssh_selinux_packages }}"
    state: present

# - name: Start SELinux status
#   ansible.builtin.command:
#     cmd: selinux-activate
#   become: true

- name: Configure selinux | selinux-01
  become: true
  ansible.posix.selinux:
    policy: "{{ os_selinux_policy }}"
    state: "{{ os_selinux_state }}" # noqa args - see https://github.com/ansible/ansible-lint/issues/2930

- name: Persist SELinux configuration in /etc/selinux/config
  become: true
  lineinfile:
    path: /etc/selinux/config
    regexp: '^SELINUX='
    line: 'SELINUX={{ os_selinux_state }}'

- name: Enable SELinux kernel parameters
  become: true
  blockinfile:
    path: /etc/default/grub
    marker: "# {mark} ANSIBLE MANAGED SELINUX"
    block: |
      GRUB_CMDLINE_LINUX="security=selinux selinux=1"

- name: Update GRUB configuration
  become: true
  command: update-grub
  when: ansible_facts['os_family'] == 'Debian'
# - name: Ensure SELinux is enabled in GRUB
#   ansible.builtin.replace:
#     path: /etc/default/grub
#     regexp: "(^GRUB_CMDLINE_LINUX=.*)(selinux=0|enforcing=0)(.*$)"
#     replace: '\1\3'
#   become: true

# - name: Regenerate GRUB configuration
#   ansible.builtin.command:
#     cmd: grub-mkconfig -o /boot/grub/grub.cfg
#   become: true

# - name: Set SELinux to enforcing in current session
#   ansible.builtin.command:
#     cmd: setenforce 1
#   ignore_errors: true # Optional: handles scenarios where SELinux is already enforcing
#   become: true

- name: Reboot the system
  ansible.builtin.reboot:
    msg: "Rebooting to apply SELinux changes"
    reboot_timeout: 300
  become: true

- name: Check SELinux status
  ansible.builtin.command:
    cmd: getenforce
  register: selinux_status

- name: Verify SELinux is enforcing
  ansible.builtin.fail:
    msg: "SELinux is not enforcing!"
  when: selinux_status.stdout != "Enforcing"

- name: Authorize the following ports for selinux - {{ ssh_server_ports }}
  become: true
  community.general.seport:
    ports: "{{ item }}"
    proto: tcp
    setype: ssh_port_t
    state: present
  loop: "{{ ssh_server_ports }}"

- name: Check if ssh_password module is already installed
  ansible.builtin.shell: set -o pipefail && semodule -l | grep ssh_password
  args:
    executable: /bin/bash
  register: ssh_password_module
  failed_when: false
  changed_when: false
  check_mode: false
